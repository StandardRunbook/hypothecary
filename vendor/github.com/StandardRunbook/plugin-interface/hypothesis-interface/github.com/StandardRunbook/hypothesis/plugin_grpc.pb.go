// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: plugin.proto

package hypothesis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hypothesis_Init_FullMethodName        = "/runbook_hypothesis.Hypothesis/Init"
	Hypothesis_Name_FullMethodName        = "/runbook_hypothesis.Hypothesis/Name"
	Hypothesis_Version_FullMethodName     = "/runbook_hypothesis.Hypothesis/Version"
	Hypothesis_Run_FullMethodName         = "/runbook_hypothesis.Hypothesis/Run"
	Hypothesis_ParseOutput_FullMethodName = "/runbook_hypothesis.Hypothesis/ParseOutput"
)

// HypothesisClient is the client API for Hypothesis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The IPlugin service that represents your interface
type HypothesisClient interface {
	// Initializes the plugin
	Init(ctx context.Context, in *Config, opts ...grpc.CallOption) (*InitResponse, error)
	// Retrieves the name of the plugin
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResponse, error)
	// Retrieves the version of the plugin
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Runs the plugin
	Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RunResponse, error)
	// Parses the output of the plugin
	ParseOutput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParseOutputResponse, error)
}

type hypothesisClient struct {
	cc grpc.ClientConnInterface
}

func NewHypothesisClient(cc grpc.ClientConnInterface) HypothesisClient {
	return &hypothesisClient{cc}
}

func (c *hypothesisClient) Init(ctx context.Context, in *Config, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Hypothesis_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypothesisClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, Hypothesis_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypothesisClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, Hypothesis_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypothesisClient) Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, Hypothesis_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypothesisClient) ParseOutput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParseOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseOutputResponse)
	err := c.cc.Invoke(ctx, Hypothesis_ParseOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HypothesisServer is the server API for Hypothesis service.
// All implementations must embed UnimplementedHypothesisServer
// for forward compatibility.
//
// The IPlugin service that represents your interface
type HypothesisServer interface {
	// Initializes the plugin
	Init(context.Context, *Config) (*InitResponse, error)
	// Retrieves the name of the plugin
	Name(context.Context, *Empty) (*NameResponse, error)
	// Retrieves the version of the plugin
	Version(context.Context, *Empty) (*VersionResponse, error)
	// Runs the plugin
	Run(context.Context, *Empty) (*RunResponse, error)
	// Parses the output of the plugin
	ParseOutput(context.Context, *Empty) (*ParseOutputResponse, error)
	mustEmbedUnimplementedHypothesisServer()
}

// UnimplementedHypothesisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHypothesisServer struct{}

func (UnimplementedHypothesisServer) Init(context.Context, *Config) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedHypothesisServer) Name(context.Context, *Empty) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedHypothesisServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedHypothesisServer) Run(context.Context, *Empty) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedHypothesisServer) ParseOutput(context.Context, *Empty) (*ParseOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseOutput not implemented")
}
func (UnimplementedHypothesisServer) mustEmbedUnimplementedHypothesisServer() {}
func (UnimplementedHypothesisServer) testEmbeddedByValue()                    {}

// UnsafeHypothesisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HypothesisServer will
// result in compilation errors.
type UnsafeHypothesisServer interface {
	mustEmbedUnimplementedHypothesisServer()
}

func RegisterHypothesisServer(s grpc.ServiceRegistrar, srv HypothesisServer) {
	// If the following call pancis, it indicates UnimplementedHypothesisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hypothesis_ServiceDesc, srv)
}

func _Hypothesis_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypothesisServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hypothesis_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypothesisServer).Init(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hypothesis_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypothesisServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hypothesis_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypothesisServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hypothesis_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypothesisServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hypothesis_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypothesisServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hypothesis_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypothesisServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hypothesis_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypothesisServer).Run(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hypothesis_ParseOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypothesisServer).ParseOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hypothesis_ParseOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypothesisServer).ParseOutput(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Hypothesis_ServiceDesc is the grpc.ServiceDesc for Hypothesis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hypothesis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runbook_hypothesis.Hypothesis",
	HandlerType: (*HypothesisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Hypothesis_Init_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _Hypothesis_Name_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Hypothesis_Version_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Hypothesis_Run_Handler,
		},
		{
			MethodName: "ParseOutput",
			Handler:    _Hypothesis_ParseOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
